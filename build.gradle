plugins {
    id 'java'
    id 'groovy'
    id "biz.aQute.bnd.builder" version "5.1.2"
    id 'java-library'
    id 'maven-publish'
    id 'signing'
    id 'pl.allegro.tech.build.axion-release' version '1.13.1'
    id "nebula.optional-base" version "3.0.3"
}

repositories {
    mavenCentral()
    // sonatype snapshots
    maven {
        url 'https://oss.sonatype.org/content/repositories/snapshots/'
    }
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

dependencies {
    api "org.mnode.ical4j:ical4j:$ical4jVersion",
            "org.mnode.ical4j:ical4j-vcard:$ical4jVCardVersion",
            'commons-io:commons-io:2.11.0',
            "org.apache.jackrabbit:jackrabbit-webdav:$jackrabbitWebdavVersion",
            'javax.jcr:jcr:2.0',
            'org.jcrom:jcrom:2.2.0'

    implementation "org.codehaus.groovy:groovy:$groovyVersion", optional

    compileOnly 'javax.servlet:servlet-api:2.5'

    testCompile 'org.apache.jackrabbit:jackrabbit-core:2.21.9',
            "io.opentracing:opentracing-mock:$openTracingVersion"


    // junit
    testImplementation 'org.junit.vintage:junit-vintage-engine:5.8.2'

    // groovy-test
    testImplementation "org.codehaus.groovy:groovy-test:$groovyVersion"

    // spock
    testImplementation platform("org.spockframework:spock-bom:2.0-M4-groovy-3.0"),
            "org.spockframework:spock-core",
            "org.slf4j:slf4j-log4j12:$slf4jVersion",
            "org.apache.logging.log4j:log4j:$log4jVersion"

    // testcontainers
    testImplementation "org.testcontainers:testcontainers:1.16.2",
        "org.testcontainers:spock:1.16.2"

}

test {
    useJUnitPlatform()
}

javadoc {
    options {
        links 'https://docs.oracle.com/en/java/javase/11/docs/api/',
                'http://ical4j.github.io/docs/ical4j/api/4.0.0-alpha6/'
    }
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    archiveClassifier.set('javadoc')
    from 'build/docs/javadoc'
}

task sourcesJar(type: Jar) {
    from sourceSets.main.allSource
    archiveClassifier.set('sources')
}

artifacts {
    archives javadocJar
    archives sourcesJar
}

scmVersion {
    tag {
        prefix = 'ical4j-connector-'
    }
    versionCreator 'versionWithBranch'
    branchVersionCreator = ['master': 'simple']
}

group = 'org.mnode.ical4j'
description = 'A Java library for accessing iCalendar data stores'
version = scmVersion.version

ext {
    isReleaseVersion = !version.endsWith("SNAPSHOT")
}

publishing {
    publications {
        ical4j_connector(MavenPublication) {
            from components.java
            artifact javadocJar
            artifact sourcesJar
            pom.withXml {
                asNode().appendNode('name', project.name)
                asNode().appendNode('description', project.description)
                asNode().appendNode('url', 'http://ical4j.github.io')

                def scmNode = asNode().appendNode('scm')
                scmNode.appendNode('url', 'https://github.com/ical4j/ical4j-connector')
                scmNode.appendNode('connection', 'scm:git@github.com:ical4j/ical4j-connector.git')
                scmNode.appendNode('developerConnection', 'scm:git@github.com:ical4j/ical4j-connector.git')

                def licenseNode = asNode().appendNode('licenses').appendNode('license')
                licenseNode.appendNode('name', 'iCal4j - License')
                licenseNode.appendNode('url', 'https://raw.githubusercontent.com/ical4j/ical4j-connector/master/LICENSE.txt')
                licenseNode.appendNode('distribution', 'repo')

                def developerNode = asNode().appendNode('developers').appendNode('developer')
                developerNode.appendNode('id', 'fortuna')
                developerNode.appendNode('name', 'Ben Fortuna')
            }
        }
    }

    repositories {
        maven {
            name = "OSSRH"
            url = !isReleaseVersion ? "https://oss.sonatype.org/content/repositories/snapshots/" : "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
            credentials {
                username = System.getenv("MAVEN_USERNAME")
                password = System.getenv("MAVEN_PASSWORD")
            }
        }
    }
}

signing {
    required { isReleaseVersion }
    sign publishing.publications.ical4j_connector
}
